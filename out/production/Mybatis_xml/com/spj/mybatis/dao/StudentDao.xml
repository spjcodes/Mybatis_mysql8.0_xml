<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spj.mybatis.dao.StudentDao">
    <!--接口式编程
        namespace 需要与类名一致
        id 需要与对应的接口方法名一致
        mybatis会采用动态代理自动调用sql
        -->
    <select id="getStudentsi" resultType="com.spj.mybatis.model.Student">
        select * from student
    </select>


    <!--#{id}占位符，类似于jdbc中的？,其中{}内的内容可以随便写-->
    <select id="selectStudent" parameterType="int" resultType="com.spj.mybatis.model.Student">
      select * from student where id = #{id}
    </select>

    <!--返回的是一个集合类型，设置差数为集合所包含的数据类型，可以使用resultType,也可以使用resultMap,两者只能用一个-->
    <select id="selectStudents" resultType="com.spj.mybatis.model.Student">
        select * from student
    </select>



    <!--${}字符串拼接符，可以输入任何合法字符无法防止sql注入-->
    <select id="seleteStudentByName" parameterType="string" resultType="com.spj.mybatis.model.Student">
        select * from student where name like '%${NamekeyWord}%'
    </select>

    <!--字符串拼接可以使用mysql的concat()函数，防止sql注入-->
    <select id="selectStudnetLikeName" parameterType="string" resultType="com.spj.mybatis.model.Student">
        select s.id, s.name, s.sex from student s where name like concat('%',#{keyWord},'%')
    </select>

    <insert id="addStudent" parameterType="com.spj.mybatis.model.Student">
        insert into
          student
          (id,name,english,math,java,sex)
        values
          (#{id},#{name},#{english},#{math},#{java},#{sex})
    </insert>

    <delete id="deleteStudentFById" parameterType="int">
        delete from
          student
        where
          id = #{id}
    </delete>

    <update id="updateStudent" parameterType="com.spj.mybatis.model.Student" >
        update
         student
        set
         id = #{id}, name = #{name}, english = #{english},
         math = #{math}, java = #{java}, sex = #{sex}
        where
          id = #{id}
    </update>


    <!--动态SQL-->
    <!--类似java
     if(/.../)
      if (/.../)
    如果if标签的条件真则进行拼接，为讲的不进行拼接-->
    <select id="selectStudentByInfo" parameterType="com.spj.mybatis.model.Student" resultType="com.spj.mybatis.model.Student">
        select *
         from
          student
        where
         1=1
        <if test="id!=null and id!=''" >
            and id = #{id}
        </if>
        <if test="name!=null and name!=''">
            and name = #{name}
        </if>
    </select>

    <!--
    类似java中的
    switch() {
    case1 :
        /。。。/ ;break;
    ...
    casen :
         /。。。/ ;break;
    default:
        /。。。/
    }
    对when的条件逐条进行检查，
    如果为真则进行拼接，并执行，
    如果为假则对下一条进行判断，
    都为假则拼接otherwise中的sql-->
    <select id="selectStudentLikeInfo" parameterType="com.spj.mybatis.model.Student" resultType="com.spj.mybatis.model.Student">
        select
          *
        from
          student
        where
          1=1
       <choose>
           <when test="name!=null and name!=''">
               and name like concat('%',#{name},'%')
           </when>
           <when test="sex!=null and sex!=''">
               and sex = #{sex}
           </when>
           <otherwise >
               and math > 91
           </otherwise>
       </choose>
    </select>

    <!--
    可以对where 1=1 进行替换，同时保证sql的合法性
    对where标签内的标签进行判断，为真则进行拼接，并且加入where关键字，为假则不进行拼接，有多余的or and
    <where> 标签也可将其去除
    -->
    <select id="selectStudentByStudentInfo" resultType="com.spj.mybatis.model.Student" parameterType="com.spj.mybatis.model.Student">
        select * from student
        <where>
            <if test="name!=null and name!=''">
                and name = #{name}
            </if>
        </where>
    </select>


    <!--trim标签去除特殊字符串，可定制特殊的需求
    prefix: 定义拼接的前缀
    prefixOVerrider： 定义去除的字段
    -->
    <select id="selectStudentByStudentInfo1" resultType="com.spj.mybatis.model.Student" parameterType="com.spj.mybatis.model.Student">
        select * from student
        <trim prefix="where" prefixOverrides="and,or">
            <if test="name!=null and name!=''">
                and name = #{name}
            </if>
        </trim>
    </select>

    <!--
    set标签会对里面的if标签进行判断，为真的才会进行拼接和更新对应字段，
    故其性能相对hibernate较好
    在拼接时会动态前置一个set同时会xio'a'chu
    -->
    <update id="updateStudnetBySet" parameterType="com.spj.mybatis.model.Student">
        update student
        <set >
            <if test="id!=null and id!=''" >
                id = #{id},
            </if>
            <if test="name!=null and name!=''" >
                name = #{name},
            </if>
            <if test="english!=null and english!=''" >
                english = #{english},
            </if>
            <if test="math!=null and math!=''" >
                math = #{math},
            </if>
            <if test="java!=null and java!=''" >
                java = #{java},
            </if>
            <if test="sex!=null and sex!=''" >
                sex = #{sex},
            </if>
        </set>
    </update>

    <!--类似java中的foreach(studnet: list)
    item: 循环中的当前元素
    colection: 传递过来的差数类型 ，可为list arraylist collection map集合的键
                                   pojo包装类中数组或集合类的属性名
    index: 当前元素在在集合中的下标
    open: 以什么符号将当前元素包裹起来 前面的
    separator: 以什么符号将当前元素包裹起来 后面的
    close: 元素间分割符
    使用map时index 是键 item是值
    -->
    <insert id="addStudentByList" parameterType="list" >
        insert into student values
        <foreach item="student" collection="list" index="" open="" separator="," close="">
           ( #{student.id},#{student.name},#{student.english},
            #{student.math},#{student.java},#{student.sex} )
        </foreach>
    </insert>


    <!--bind标签用来进行动态sql组装，其中values值可用OGNL表达式，也可直接使用属性名-->
    <!--bind vule值用OGNL表达式拼接-->
    <select id="selectStudnetsLike" resultType="com.spj.mybatis.model.Student" parameterType="com.spj.mybatis.model.Student">
        <bind name="pattern" value="'%' + _parameter.getName() + '%'" />
        select * from student
        <where>
            <if test="name!=null and name!=''">
                name like #{pattern}
            </if>
        </where>
    </select>

    <!--bind vule值用属性名拼接-->
    <select id="selectStudnetsLike1" resultType="com.spj.mybatis.model.Student" parameterType="com.spj.mybatis.model.Student">
        <bind name="pattern" value="'%' + name + '%'" />
        select * from student
        <where>
            <if test="name!=null and name!=''">
                name like #{pattern}
            </if>
        </where>
    </select>








</mapper>